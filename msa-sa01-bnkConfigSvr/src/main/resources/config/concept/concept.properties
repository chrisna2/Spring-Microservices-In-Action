## [중요] 명명 규칙 : <서비스명>-<각각의하위서비스URI>.properties 
## <각각의하위서비스URI>가 없는 경우 기본값으로 설정이 됨

## 해당 설정의 정보는 여기 서버에서 관리되어 각각의 서버에 전달된다.

##DB 설정
example.property="Concept : Oracle DB Call : I am Default"
spring.datasource.url=jdbc:oracle:thin:@localhost:1521:orcl
spring.datasource.driver-class-name=oracle.jdbc.OracleDriver
spring.datasource.username=concept
spring.datasource.password={cipher}50b0f56a69069d7adaa4f4c48f75ff12be0d440bb5ad49b412da701463b49c4c
spring.datasource.testWhileIdle=true
spring.datasource.validationQuery=SELECT 1

## mybatis-mapper 설정
mybatis.config-location=classpath:mybatis-config.xml
mybatis.mapper-locations=classpath:mappers/**/*.xml

## mybatis 실행 로그 확인
logging.level.org.springframework=INFO
logging.level.com.tyn.bnk.persistence.*=INFO
logging.file=logs/spring-boot-logging.log

## 메세지를 발행 하기 위한 스프링 클라우드 설정 
# stream.bindings는 서비스가 스프링 클라우드 클라우드 스트림에 메시지 브로커에 발행하려는 구성의 시작점이다.
# stream.bindings.output은 채널의 이름이며 Source.output() 채널에 매핑된다.
# 메세지를 넣을 메시지 큐(또는 토픽)의 이름.
spring.cloud.stream.bindings.output.destination=orgChgConcept
# 스프링 클라우드 스트림에 송수신할 메시지 타입의 정보를 제공한다.(현재 경우 JSON이지만 XML, Avro 포맷등 다양한 형식을 지원)
spring.cloud.stream.bindings.output.content-type=application/json
# stream.bindings.kafka 프로퍼티는 해당 서비스가 메세지 버스로 카프카를 사용할 것이라고 스프링에 전달한다.
# zkNodes와 brokers는 스프링 클라우드 스트림에 카프카와 주키퍼의 네트워크 위치를 전달한다.
spring.cloud.stream.kafka.binder.zkNodes=localhost
spring.cloud.stream.kafka.binder.brokers=localhost
